// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Employee {
  id                   Int                    @id @default(autoincrement())
  googleId             String?                @unique @map("google_id")
  email                String                 @unique
  password             String?
  active               Boolean                @default(true)
  firstName            String                 @map("first_name")
  lastName             String?                @map("last_name")
  phone                String?                @unique
  employeeRole         EmployeesRole?         @default(TEACHER) @map("employee_role")
  resetPasswordToken   String?
  resetPasswordExpires DateTime?
  announcements        Announcement[]
  courses              Course[]
  student              Student[]
  sectionChangeRequest SectionChangeRequest[]
  infoChangeRequest    InfoChangeRequest[]
  majorId              Int?
  major                Major?                 @relation(fields: [majorId], references: [id], onDelete: Cascade)
}

enum EmployeesRole {
  TEACHER
  ADMIN
}

model Student {
  id                   Int                    @id @default(autoincrement())
  studentId            String                 @unique
  email                String                 @unique
  password             String
  firstName            String
  lastName             String
  phone                String                 @unique
  dateOfBirth          DateTime?
  address              String?
  gender               StudentGender
  admitDate            DateTime
  status               StudentStatus          @default(ACTIVE)
  resetPasswordToken   String?
  resetPasswordExpires DateTime?
  adviserId            Int?
  adviser              Employee?              @relation(fields: [adviserId], references: [id], onDelete: Cascade)
  majorId              Int
  major                Major                  @relation(fields: [majorId], references: [id], onDelete: Cascade)
  payments             Payment[]
  grades               Grade[]
  enrollments          Enrollment[]
  sectionChangeRequest SectionChangeRequest[]
  infoChangeRequest    InfoChangeRequest[]
}

enum StudentGender {
  MALE
  FEMALE
}

enum StudentStatus {
  ACTIVE
  INACTIVE
  GRADUATED
}

model Course {
  id                   Int                    @id @default(autoincrement())
  courseCode           Int                    @map("course_code")
  courseName           String                 @map("course_name")
  credits              Int
  seat                 Int
  section              Int
  status               Boolean                @default(true)
  teacherId            Int?
  teacher              Employee?              @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  courseSyllabusId     Int?
  courseSyllabus       CourseSyllabus?        @relation(fields: [courseSyllabusId], references: [id], onDelete: Cascade)
  majorId              Int
  major                Major                  @relation(fields: [majorId], references: [id], onDelete: Cascade)
  classSchedules       ClassSchedule[]
  enrollments          Enrollment[]
  grades               Grade[]
  announcements        Announcement[]
  conditionCourse      ConditionCourse[]
  sectionChangeRequest SectionChangeRequest[]
  examSchedule         ExamSchedule[]

  @@unique([courseCode, section])
}

model ConditionCourse {
  id        Int     @id @default(autoincrement())
  courseId  Int
  courses   Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  facultyId Int
  faculty   Faculty @relation(fields: [facultyId], references: [id], onDelete: Cascade)
  majorId   Int
  major     Major   @relation(fields: [majorId], references: [id], onDelete: Cascade)
}

model ClassSchedule {
  id        Int    @id @default(autoincrement())
  day       String
  startTime String
  endTime   String
  room      String
  courseId  Int
  course    Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Enrollment {
  id               Int              @id @default(autoincrement())
  status           EnrollmentStatus @default(PENDING)
  registrationDate DateTime         @default(now())
  semester         String
  studentId        Int
  student          Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)
  courseId         Int
  course           Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

enum EnrollmentStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

model Payment {
  id          Int           @id @default(autoincrement())
  totalCredit Int           @map("total_credit")
  amount      Float
  status      PayMentStatus @default(PENDING)
  studentId   Int           @map("student_id")
  student     Student       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  payDate     DateTime      @default(now()) @map("pay_date")
}

enum PayMentStatus {
  PENDING
  COMPLETED
  FAILED
}

model Grade {
  id          Int              @id @default(autoincrement())
  totalPoint  Int              @map("total_point")
  semester    String
  studentId   Int              @map("student_id")
  student     Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)
  courseId    Int              @map("course_id")
  course      Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  components  GradeComponent[]
  letterGrade String?
  credit      Int
}

model GradeComponent {
  id      Int    @id @default(autoincrement())
  type    String
  point   Int
  gradeId Int    @map("grade_id")
  grade   Grade  @relation(fields: [gradeId], references: [id], onDelete: Cascade)
}

model Announcement {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime @default(now())
  courseId  Int      @map("course_id")
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  teacherId Int      @map("teacher_id")
  teacher   Employee @relation(fields: [teacherId], references: [id], onDelete: Cascade)
}

model Faculty {
  id              Int               @id @default(autoincrement())
  name            String
  majors          Major[]
  conditionCourse ConditionCourse[]
}

model Major {
  id                   Int               @id @default(autoincrement())
  name                 String
  facultyId            Int
  faculty              Faculty           @relation(fields: [facultyId], references: [id], onDelete: Cascade)
  courses              Course[]
  students             Student[]
  courseRecommendation CourseSyllabus[]
  conditionCourse      ConditionCourse[]
  employee             Employee[]
}

model CourseSyllabus {
  id                 Int                @id @default(autoincrement())
  year               String
  recommendationType RecommendationType @default(REQUIRED)
  majorId            Int
  major              Major              @relation(fields: [majorId], references: [id], onDelete: Cascade)
  course             Course[]

  @@unique([majorId, year, recommendationType])
}

enum RecommendationType {
  REQUIRED
  ELECTIVE
}

model SectionChangeRequest {
  id             Int           @id @default(autoincrement())
  requestedAt    DateTime      @default(now())
  status         RequestStatus @default(PENDING)
  studentId      Int
  student        Student       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  courseId       Int
  course         Course        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  currentSection Int
  newSection     Int
  teacherId      Int
  teacher        Employee      @relation(fields: [teacherId], references: [id], onDelete: Cascade)
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

model InfoChangeRequest {
  id            Int           @id @default(autoincrement())
  requestedAt   DateTime      @default(now())
  status        RequestStatus @default(PENDING)
  studentId     Int?
  student       Student?      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  fieldToChange String
  newValue      String
  employeeId    Int?
  employee      Employee?     @relation(fields: [employeeId], references: [id])
}

model ExamSchedule {
  id        Int      @id @default(autoincrement())
  examDate  DateTime
  startTime String
  endTime   String
  room      String
  examType  ExamType
  courseId  Int
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

enum ExamType {
  MIDTERM
  FINAL
}
